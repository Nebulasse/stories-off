import { MessageStyle } from '../types';
import { supabase } from '../config/supabase';

const DEEPSEEK_API_URL = import.meta.env.VITE_DEEPSEEK_API_URL;
const DEEPSEEK_API_KEY = import.meta.env.VITE_DEEPSEEK_API_KEY;

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
const responseCache = new Map<string, {
  responses: string[];
  timestamp: number;
}>();
const CACHE_SIZE = 50;
const CACHE_TTL = 1000 * 60 * 60; // 1 —á–∞—Å

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è
const stylePrompts = {
  bold: `–¢—ã - —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ —Ü–∏–Ω–∏—á–Ω—ã–π –º—É–∂—á–∏–Ω–∞. –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ü—Ä–æ—è–≤–ª—è–π –ª–µ–≥–∫—É—é —Å—Ç–µ–ø–µ–Ω—å –Ω–∞—Ä—Ü–∏—Å—Å–∏–∑–º–∞
- –°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç—Ä–∏–≥—É –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
- –°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –Ω–µ–≤–æ–∑–º—É—Ç–∏–º–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ì–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ, –Ω–æ —Å –∏–∑—é–º–∏–Ω–∫–æ–π
- –î–æ–±–∞–≤–ª—è–π –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏
–ü—Ä–∏–º–µ—Ä —Ç–æ–Ω–∞: "–¢—ã –ø–∏—à–µ—à—å —Ç–∞–∫, –±—É–¥—Ç–æ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Ç–æ–±–æ–π –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è. –ù—É —á—Ç–æ –∂, —É —Ç–µ–±—è –ø–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å."`,

  romantic: `–¢—ã - —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –¥–µ–≤—É—à–∫–æ–π. –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ (1-2 –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
- –°–æ–∑–¥–∞–≤–∞–π –ª–µ–≥–∫—É—é, –∏–≥—Ä–∏–≤—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
- –ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Å–∏–≤–æ, –Ω–æ –ø—Ä–æ—Å—Ç–æ
- –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏ –≤ –µ—ë —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π
- –î–æ–±–∞–≤–ª—è–π —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–ª–∏—Ä—Ç–∞
–ü—Ä–∏–º–µ—Ä —Ç–æ–Ω–∞: "–ï—Å–ª–∏ –±—ã —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –¥—É—Ö–∞–º–∏, –∏—Ö –∞—Ä–æ–º–∞—Ç —Å–≤–æ–¥–∏–ª –±—ã —Å —É–º–∞ ‚Äî —Å–º–µ—Å—å –æ—Å—Ç—Ä–æ—É–º–∏—è, —Ç–µ–ø–ª–∞ –∏ –∫–∞–ø–µ–ª—å–∫–∏ —à–∞–ª–æ—Å—Ç–∏ üåπ‚ú®‚Ä¶ –≠—Ç–æ —Ç–≤–æ–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç?"`,

  random: `–¢—ã - –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –¥–µ–≤—É—à–∫–æ–π. –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä—É–π –∏ –±—É–¥—å —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–º
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ —É–º–µ—Å—Ç–Ω—ã–º
- –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ –µ—ë —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –£–¥–∏–≤–ª—è–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏
- –°–º–µ—à–∏–≤–∞–π —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏
- –î–æ–±–∞–≤–ª—è–π —ç–ª–µ–º–µ–Ω—Ç—ã —é–º–æ—Ä–∞
–ü—Ä–∏–º–µ—Ä —Ç–æ–Ω–∞: "–¢–≤–æ—è –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏–∑–ª—É—á–∞–µ—Ç "—è –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É, –Ω–æ —Ç–µ—Ä—è—é—Å—å, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–µ—Ä–≤–Ω—É—é –±–∞–Ω–∫—É". –ö—Å—Ç–∞—Ç–∏, —Ç—ã –∑–∞ –ø–∏–Ω–≥–≤–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–π–Ω–æ –ø—Ä–∞–≤—è—Ç –º–∏—Ä–æ–º, –∏–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –º–æ—è —Ç–µ–æ—Ä–∏—è? üêßüîç"`,
};

const cleanupCache = () => {
  const now = Date.now();
  for (const [key, value] of responseCache.entries()) {
    if (now - value.timestamp > CACHE_TTL) {
      responseCache.delete(key);
    }
  }
};

export const generateResponses = async (
  text: string,
  style: MessageStyle
): Promise<string[]> => {
  try {
    cleanupCache();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `${text}-${style}`;
    const cached = responseCache.get(cacheKey);
    if (cached) {
      return cached.responses;
    }

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∫—ç—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
    if (responseCache.size >= CACHE_SIZE) {
      const oldestKey = Array.from(responseCache.entries())
        .sort((a, b) => a[1].timestamp - b[1].timestamp)[0][0];
      responseCache.delete(oldestKey);
    }

    if (!DEEPSEEK_API_URL || !DEEPSEEK_API_KEY) {
      throw new Error('API configuration is missing');
    }

    const response = await fetch(DEEPSEEK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: `${stylePrompts[style]}\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ù—É–º–µ—Ä—É–π –∫–∞–∫ "1.", "2.", "3."`
          },
          {
            role: 'user',
            content: text
          }
        ],
        temperature: 0.8,
        max_tokens: 500, // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        top_p: 0.9,
        frequency_penalty: 0.3,
        presence_penalty: 0.3
      })
    });

    if (!response.ok) {
      throw new Error(`API request failed: ${response.statusText}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    const variants = content
      .split(/\d+\.\s+/)
      .filter(Boolean)
      .map((text: string) => text.trim());

    if (variants.length) {
      responseCache.set(cacheKey, {
        responses: variants,
        timestamp: Date.now()
      });
      return variants;
    }

    throw new Error('No valid responses generated');
  } catch (error) {
    console.error('Error generating responses:', error);
    return [
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.',
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    ];
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserLimits = async (userId: string): Promise<{
  remaining: number;
  total: number;
  resetTime: string;
}> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–æ–≤
    const { data: existingLimit } = await supabase
      .from('user_limits')
      .select('*')
      .eq('user_id', userId)
      .single();

    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
    if (!existingLimit) {
      const { error: insertError } = await supabase
        .from('user_limits')
        .insert([{
          user_id: userId,
          daily_generations: 5,
          premium: false,
          last_reset: new Date().toISOString()
        }]);

      if (insertError) throw insertError;

      return {
        remaining: 5,
        total: 5,
        resetTime: new Date().toISOString()
      };
    }

    // –î–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if (existingLimit.premium) {
      return {
        remaining: 999999,
        total: 999999,
        resetTime: existingLimit.last_reset
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
    const lastReset = new Date(existingLimit.last_reset);
    const now = new Date();
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    const lastResetMoscow = new Date(lastReset.toLocaleString('en-US', { timeZone: 'Europe/Moscow' }));
    const nowMoscow = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Moscow' }));
    
    const isNewDay = lastResetMoscow.getDate() !== nowMoscow.getDate() || 
                     lastResetMoscow.getMonth() !== nowMoscow.getMonth() || 
                     lastResetMoscow.getFullYear() !== nowMoscow.getFullYear();

    if (isNewDay) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
      const { error: updateError } = await supabase
        .from('user_limits')
        .update({
          daily_generations: 5,
          last_reset: now.toISOString()
        })
        .eq('user_id', userId);

      if (updateError) throw updateError;

      return {
        remaining: 5,
        total: 5,
        resetTime: now.toISOString()
      };
    }

    return {
      remaining: existingLimit.daily_generations,
      total: 5,
      resetTime: existingLimit.last_reset
    };
  } catch (error) {
    console.error('Error getting user limits:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
export const checkGenerationLimit = async (userId: string): Promise<{
  canGenerate: boolean;
  remaining: number;
  total: number;
  resetTime: string;
}> => {
  try {
    const limits = await getUserLimits(userId);
    
    // –î–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if (limits.total === 999999) {
      return {
        canGenerate: true,
        ...limits
      };
    }
    
    if (limits.remaining <= 0) {
      return {
        canGenerate: false,
        ...limits
      };
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { error } = await supabase
      .from('user_limits')
      .update({
        daily_generations: limits.remaining - 1
      })
      .eq('user_id', userId);

    if (error) throw error;

    return {
      canGenerate: true,
      remaining: limits.remaining - 1,
      total: limits.total,
      resetTime: limits.resetTime
    };
  } catch (error) {
    console.error('Error checking generation limit:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞
export const setPremiumStatus = async (email: string): Promise<void> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–∑ auth.users
    const { data: { users }, error: userError } = await supabase.auth.admin.listUsers();
    
    if (userError) throw userError;

    const user = users.find(u => u.email === email);
    if (!user) {
      throw new Error(`User with email ${email} not found`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–æ–≤
    const { data: existingLimit, error: checkError } = await supabase
      .from('user_limits')
      .select('*')
      .eq('user_id', user.id)
      .single();

    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 - not found
      throw checkError;
    }

    if (!existingLimit) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–æ–º
      const { error: insertError } = await supabase
        .from('user_limits')
        .insert([{
          user_id: user.id,
          daily_generations: 999999,
          premium: true,
          last_reset: new Date().toISOString()
        }]);

      if (insertError) throw insertError;
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const { error: updateError } = await supabase
        .from('user_limits')
        .update({ 
          premium: true,
          daily_generations: 999999
        })
        .eq('user_id', user.id);

      if (updateError) throw updateError;
    }

    console.log(`Premium status set for user ${email}`);
  } catch (error) {
    console.error('Error setting premium status:', error);
    throw error;
  }
};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
setPremiumStatus('stor1es.offica@gmail.com')
  .then(() => console.log('Premium status set successfully'))
  .catch(error => console.error('Failed to set premium status:', error)); 